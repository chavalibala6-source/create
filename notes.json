[
    {
        "page_number": 1,
        "title": "Flow control",
        "text": "<img src=\"static/uploads/multiple.png\">\r\n\r\nto check conditions on a name and age and respond differently. Let me give you a cleaner, more Pythonic version that avoids repetition and is easier to extend later:\r\n<pre><code class=\"language-python\">\r\ndef greet_user(name: str, age: int) -> None:\r\n    if name == \"Alice\":\r\n        print(\"Hi, Alice.\")\r\n    elif age < 12:\r\n        print(\"You are not Alice, kiddo.\")\r\n    elif age > 2000:\r\n        print(\"Unlike you, Alice is not an undead, immortal vampire.\")\r\n    elif age > 100:\r\n        print(\"You are not Alice, grannie.\")\r\n    else:\r\n        print(f\"Hello {name}, nice to meet you!\")\r\n\r\n# Example usage:\r\ngreet_user(\"Alice\", 11)    # Hi, Alice.\r\ngreet_user(\"Bob\", 10)      # You are not Alice, kiddo.\r\ngreet_user(\"Drac\", 2500)   # Unlike you, Alice is not an undead, immortal vampire.\r\ngreet_user(\"Eve\", 120)     # You are not Alice, grannie.\r\ngreet_user(\"Charlie\", 25)  # Hello Charlie, nice to meet you!\r\n</code></pre>\r\n\u2705 Improvements here:\r\n\r\n    Wrapped the logic in a function so it\u2019s reusable.\r\n\r\n    Added a default case (else) to handle normal names/ages.\r\n\r\n    Used f-strings for readability.\r\n\r\n    Clear order of conditions from most specific to general.\r\n\r\nDo you want me to also show you a dictionary-based mapping approach (cleaner for lots of names/conditions)?",
        "images": []
    }
]