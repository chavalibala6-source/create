[
    {
        "page_number": 1,
        "title": "conditions",
        "text": "<h1>Conditions</h1>\r\n<pre>The Boolean expressions you\u2019ve seen so far could all be considered con- ditions, which are the same thing as expressions; condition is just a more specific name in the context of flow control statements. Conditions always evaluate down to a Boolean value, True or False. A flow control statement decides what to do based on whether its condition is True or False, and almost every flow control statement uses a condition.\r\nBlocks of Code\r\nLines of Python code can be grouped together in blocks. You can tell when a block begins and ends from the indentation of the lines of code. There are three rules for blocks.\r\n<code>1. Blocks begin when the indentation increases.\r\n2. Blocks can contain other blocks.\r\n3. Blocks end when the indentation decreases to zero or to a containing block\u2019s indentation.\r\n</code>\r\n</pre>",
        "images": []
    },
    {
        "page_number": 2,
        "title": "Flow control",
        "text": "<h1>flow control Statements</h1>\r\n<pre>\r\nNow, let\u2019s explore the most important piece of flow control: the statements themselves. \r\nThe statements represent the diamonds you saw in the flowchart in Figure 2-1, and they are the actual decisions your programs will make.\r\nif Statements\r\nThe most common type of flow control statement is the if statement. \r\nAn if statement\u2019s clause (that is, the block following the if statement) will execute if the statement\u2019s condition is True. The clause is skipped if the condition is False.\r\nIn plain English, an if statement could be read as, \r\n\u201cIf this condition is true, execute the code in the clause.\u201d In Python, an if statement consists of the following:\r\n\u2022 The if keyword\r\n\u2022 A condition (that is, an expression that evaluates to True or False)\r\n\u2022 A colon\r\n\u2022 Starting on the next line, an indented block of code (called the if clause)</pre>",
        "images": []
    },
    {
        "page_number": 3,
        "title": "example",
        "text": "<pre>if name == 'Alice': \r\n  print('Hi, Alice.')\r\n</pre>\r\n<p>\r\nAll flow control statements end with a colon and are followed by a new block of code (the clause). This if statement\u2019s clause is the block with print('Hi, Alice.'). Figure 2-3 shows what a flowchart of this code would look like.</p>\r\n\r\n<h1>else Statements</h1>\r\n<p>An if clause can optionally be followed by an else statement. The else clause is executed only when the if statement\u2019s condition is False. In plain English, an else statement could be read as, \u201cIf this condition is true, execute this code. Or else, execute that code.\u201d An else statement doesn\u2019t have a condi- tion, and in code, an else statement always consists of the following:\r\n\u2022 The else keyword\r\n\u2022 A colon\r\n\u2022 Starting on the next line, an indented block of code (called the else clause)\r\nReturning to the Alice example, let\u2019s look at some code that uses an else statement to offer a different greeting if the person\u2019s name isn\u2019t Alice.\r\nif name == 'Alice': print('Hi, Alice.')\r\n</p>",
        "images": []
    },
    {
        "page_number": 4,
        "title": "elif",
        "text": "<pre>elif Statements\r\nWhile only one of the if or else clauses will execute, you may have a case where you want one of many possible clauses to execute. The elif statement is an \u201celse if\u201d statement that always follows an if or another elif statement. It provides another condition that is checked only if any of the previous con- ditions were False. In code, an elif statement always consists of the following:\r\n\u2022 The elif keyword\r\n\u2022 A condition (that is, an expression that evaluates to True or False)\r\n\u2022 A colon\r\n\u2022 Starting on the next line, an indented block of code (called the elif clause)\r\nLet\u2019s add an elif to the name checker to see this statement in action.\r\nif name == 'Alice': print('Hi, Alice.')\r\nelif age < 12:\r\nprint('You are not Alice, kiddo.')\r\n</pre>",
        "images": []
    }
]