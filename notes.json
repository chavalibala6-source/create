[
    {
        "page_number": 1,
        "title": "conditions",
        "text": "Conditions\r\nThe Boolean expressions you\u2019ve seen so far could all be considered con- ditions, which are the same thing as expressions; condition is just a more specific name in the context of flow control statements. Conditions always evaluate down to a Boolean value, True or False. A flow control statement decides what to do based on whether its condition is True or False, and almost every flow control statement uses a condition.\r\nBlocks of Code\r\nLines of Python code can be grouped together in blocks. You can tell when a block begins and ends from the indentation of the lines of code. There are three rules for blocks.\r\n1. Blocks begin when the indentation increases.\r\n2. Blocks can contain other blocks.\r\n3. Blocks end when the indentation decreases to zero or to a containing block\u2019s indentation.",
        "images": []
    },
    {
        "page_number": 2,
        "title": "Flow control",
        "text": "<h1>flow control Statements</h1>\r\n<pre><p>\r\nNow, let\u2019s explore the most important piece of flow control: the statements themselves. The statements represent the diamonds you saw in the flowchart in Figure 2-1, and they are the actual decisions your programs will make.\r\nif Statements\r\nThe most common type of flow control statement is the if statement. An if statement\u2019s clause (that is, the block following the if statement) will execute if the statement\u2019s condition is True. The clause is skipped if the condition is False.\r\nIn plain English, an if statement could be read as, \u201cIf this condition is true, execute the code in the clause.\u201d In Python, an if statement consists of the following:\r\n\u2022 The if keyword\r\n\u2022 A condition (that is, an expression that evaluates to True or False)\r\n\u2022 A colon\r\n\u2022 Starting on the next line, an indented block of code (called the if clause)</p></pre>",
        "images": []
    }
]